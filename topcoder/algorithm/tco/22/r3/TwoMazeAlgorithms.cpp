#include "bits/stdc++.h"

using namespace std;

#define ALL(c) (c).begin(), (c).end()
#define FOR(i, n) for (int i = 0; i < (int)(n); ++i)
#define MEMSET(p, c) memset(p, c, sizeof(p))
using llint = long long;
using PII = pair<int, int>;
// BEGIN CUT HERE
#define __WATASHI__
// <errf>
inline void errf(const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  vfprintf(stderr, fmt, args);
  va_end(args);
}

template <typename, typename = void>
constexpr bool is_iterable{};

template <typename T>
constexpr bool is_iterable<
  T,
  std::void_t<
    decltype(std::declval<T>().begin()),
    decltype(std::declval<T>().end())
  >
> = true;

template<typename T, typename = enable_if_t<is_iterable<T>>>
inline void errf(const char* fmt, const T& v) {
  errf("{");
  for (const auto& i: v) {
    errf(fmt, i);
  }
  errf("}\n");
}
// </errf>
// END CUT HERE
#ifndef __WATASHI__
#define errf(fmt, ...) do { } while (false)
#endif

struct TwoMazeAlgorithms {
  string classify(int TID);
};

string TwoMazeAlgorithms::classify(int TID) {
  static vector<string> ans = {  "DDDMDMDDDMMMMMDMMDDMDDMMDDMDDMMMMMDDMMDDMMMDDDMMDMDMDDMDDDMDDMDDDDDMDMDDDDMMMMMDDDMDDDDMDDMDDMDDMMMM",
  "DDMDDDDDMMMMMMDMMMMDDDMMDDMMMMMDDMDDDDDMMDDMDDMDDDDMMMMDDDMDDDMDMDDDDMDDMDMDMMDDMMDMMDMDDDMDDDDMMMDMMDDDDDDDMDDDDDDDDDDDDMMDDDDMDDMDMDDMDDDDDDDMDDMDDDMDMDDDDMMMDDMMMDDDDDMMDMDMDMDDMMMDDDDMDDDMDDDDDMMDMDDDDMMDDMDMDMDDMDDMMDDMMDDDDDDMDDDDDDMDDDDDDMDDMDDDMMDDMMDDMMMMMMDMDMDDDMMMMDDMMMMDMDDDMDMMMDDMMMMDMMDMDDMDDDMDDDMDDDMDMDMMMMMDMDMDMDMDDDDDMDMDMDDDDDDDMDDMMMMDMMMMDDDDDDMMDMMMDDMDDDMDDMDDDMDDDMDMDDMDDDDDDDDDDMMMDDDDDMDMDMMDDMMDDMMMMMDMDDMDDMDDMMMDMDMMMDMMDDMDMDDDDDDMDMDDMDMDDMDMDDDDDDMDDDDMDMDDMDMDMDMDDDMMDMDDMMDDDMDDDMDDDDMDMDMDDDMMDDDDMMMMDDMDMDMDMMMMDMDDMDDMDDDMDDDDMMMMMMDMMDDDDMDMDDDMMMMMDDMDDMDDDMDDDDDDMDDMMMDDMMDDDDMDDMMDMDDDDDDMMMMDMMDDDDDDDDDMDMMDMDDDDDMDMMDDMDDDMDMMDMDDDDDMDMDMDMDMDMMDDDDDDMDDDDDMMDDMDDDDMDDMDMMDDDDDDDDMDMDDMDMDMMMDMDDDMDDDMMMDMMDDDDMDDDDDDMMDMDDMDDDMDDDDMDDDDMDDDMDDDDDMDDDDDDMDMDDMDMMMMMMMDMMMDMMDDDMDMDDDMMMDMDMMMDDMDDMMDDDMDMDDDDMMDMDDDDDDDMDMDDMMDDDMDDDDMDDDMDDDDDMMDDMDMDMDDDDMDDMMMMMDDDMDDMDMDMDMMDDDDDMDMMDMDDDDDDDDMDDMDMMMDDMDDMDMDMDDDMDDDMMMMMDDMDMDMMDDMMDM",
  "DDDMDMDMMDMDMDDDDDMMDMDDDMDDDDDDMDDMDMDDMMMDMDDMMDDDDMDMDMDMDMMDMDDDDDMDDMMMMDMDMDDMDDDDDMMDDMDDMDDDDDMDDDMDDMMMDMMMMMDDDMMDDMDMMMMMMMDMMMDDMDMDDDDMDDMDMDDDMMDMMMDDMDMMMDMMMMDDDDDMDMMMDDDDDDMDDDMMDMDMMDMMDMDDDDDMMMMMDMMMMDMMDMDMMDMDDDDDMMMDDMDDMMDDMDMDDDDDDDDDDDMMMMMDMDDMMDDDDMMDMMDDDDMDMMMDMMMDDDMDDDDDDMMDMMMDMDDDDMMDMDDMMDMDDDMDMDMMMDDMDMMDDMDDDDMDDDDMDMMDMMDMDDDDDDDMMDDMMMMDDDMMMDDDDDDMDDDDDDDMDMMDMMMMMDDMMDMDMDDDMMMMDMDMDMDDDDDDMMDDDDMDDDDMMDDDMDMDMDDDDMMDDDDMMMMDDDMDDMMDDDDDMMDMMMDDMDDMMMMDMMDMDMDDMDMMDDMDMDMDMMDDDDDMDMMDDMMMDDDMMMDDDMMDDDMDMMDDMDMMMMDDMMMMMDMMDDMMMDMDDMMMDMDDDMDDDDDMDDMMDMMDMDMMDDMMMMDMMDMMDMDDMMDDMDDDMDMMDDMDMDDMMDMDDDDDMDDDDDMDDMMMDDMDMMDMMDMDDMDDMMDDMMMDMDDMDDMDMMMDMDDDMDMMMDDMMMDMMDDMMDMDDDDDDMDMDMDMDDDMDMMDMDDDDDDMDMMDDMDMMMDMDDDMMDMDMMDMMMDDDMDDMDMMMDDMMMMMDMDDMDMMMDDDDDDMMMMMMDDDMMDMMMMMMMMDDDDDDMMDDDDDMDMMDDMDDMDDDMDMMDDMMDMDDMMMDDMMMMDDMMDDDDDMMDMDDDDMDMDDMMMDDMMDDMDMDMDDDDMDDDDMMDDDDDDDDDDDDMMDMMMMMDDDMMDMDDDMDMDDMDDDMDMMDMDMMDDMMDDMMDMDDMDDMMMMMDDMMDDD",
  "DDMMMDMDMDMMDDDDDMMMDDMMMMMDDDDDDMMDDMDDMMMMDMMMDMMDDMDDDDMDDDMMMMDDDMDMDDMMDDMMMMDMDMMDDDMDDDMMDDMMMMDMDMDDDMMMDDDDDDMMDDMDMDDMDDDMDDDDMMDMDMDDDDMDMDMDMMMMMDDDDDDDMDMMDMDDMDDDDDDDMDDDMMDDDMMMDDDDDDDMDMDDDDDDDDMDMMMMDDDMDDDMDDMMMMDDMDMDDDMDDDDDDMDDDDMDDDMDDDMMDMDDDDMMDDMMMDDMDMMDDDDDMDMDDMMMDDMDDDMMDDMMDMMMDDDDDMMMDDMMMDDMDDDDDMMMDDDDMMMDDDDDMMMMMDDMMMMDMDDDDMDMDMMDMDDDDMDDDDMMDDDMDDMMDMDDDMMMDMDDMDMMDDMDDDMMMMMMDDDDDDMDDDDMDDDDMMDDMMMMMDDDDMMDDDMMMMDMMMDMDDMDDMMDDMMMMDDDMDDDDDDDDDDDMDDDMDDMMDMDMDDDDMMDMDDDDDDMMMDDMMMDDDDDMDMDDMDDDDMMMDDMMDDDMDDDDDDMMDMMMDDDMMDMDDDMMDDDDMMDDDDMMDDDMDMMDMMDDMMDMDDDMDMDMDMDMDDDDMDDDMDMMMMDMDDDDDMDMMDDDMDMDMDMDMDMMMMMDDMDMDMDMDMMMDMMDDMDMMDDDDDDMDDMDDMMDDMMDDDDMDDDDMMDMDDDMDMDMDMDMDMDMMDMMDMMDMDDMMDMMDDDMMMDMDDDDDMMMDMDDDDDDDDDDDDMDDMDDMDDMDMDDMMDDMDMDDDDDMMMDDDDMMMDDMDDMDMMDDDDMDDDDDDMMDDMDDDDMMMDDDDMMDDMMDDDMMDDDMDDMMDDMDMMMDMMDDMMDMDMDMDDDMDDMMDMDDDDDMDDMMDDMMDDDMMMDDDMMMDMDMDDMMMMMDDMDMDDDMDMDMMDMDMDMMDMDDDDDDMDDDDDMDDDDMDMDDDDDDDDDDDMMMDDDMMDMDDDDDDD",
  "DDMMDDDDMDDDDMDMDDMDMMMDDMDDDMDMDMDMDMMMDDDMDDDMMDMMMMMMDMDDDMDMMDMMDMDMDMMMMMDDDDDDMDMDDDMDDMDDMDDDDDMMDDDDMMDMMDMDDMDMDMMDDDMMMDMDDDMDDDDMMMDDMMMDMDMDDDDMMMMDDDMMDDDDMDDDDMDDMMDDDDDDDDDDDMDMDDDDMMDMDDDDDDMMMDDMMDMDDDDDDDMDDMDMDDDMDDDDMDDDDMMDMMDDMMMDMDMDMDDDDMDMMDMDMDMDDMMDMMDMDDDDMDDDMDDMDDMMMDDDMDDDDMDDMDDDMDMDMDDDDDDDDDDDMMDDMMDDDDDMDDDDDMMMMDMDDMDMMDDDDMDDMMMMMDDDDDMDDMDDDDDDDMDDDDMMDDMDDDMDMDMDDDDMDDMMDMDDMDMDMDMDDMDMMMDDDMMDMDMMDDDDDDDMMDDDDMMDMMDMMMMMMDDMDMMDDMDDMDMMDMDMDDMDMMDDMDDDMDDDDDMMDDMMDMMDMDDDDMDMMDDDDMMMDDMDDMDMDDDMDDMDDMMDDDMDMMDDDDDDDMMDDDDDDDDMDDDMMMDDDDDDDMMMMDDDMMMDDDDMMDMDDMDMMDMDDMDMMDDDDMDMMDDMMDDMMDMMMMDMDMDDDDDMMMDDMMDDMDDDMMMMDMMDDMMMDDDDDMMDMDDMMDDMMDMDDDDDDMMDDMMMMDDMDDDDDMMDMMDDDDMDDDDDDDMDDDDMDDDDMDMDDMMDDDDDDMDDDDDDDDMMMDDDMDDDDDDDDDMDDDMMMDMDDMDMDDDMDDMDDMDMDMDDDMDMMMDMDMDDDMDDDMDMMMMDDDMMDDDDMMMDDDDDMDDDDDMDMMDDDMDDMDMDDDDDDMMDMMMMMDDMDDDDDDDDMDDDMDDMDDMDDMDMMDMDDDDDDMMMMDMDDDMDDMDDDMDMDDDMDMDDDDDMMMDDDDDDMDMDMMDMMDDDDDMMMMMDDMDMDDMMMDDDMMMMMDDDDDDD",
  "DDDMMDDMMDDDMDMMDMMMMDDMMMDDDDDDDMMDDDMDDDDDMDDMMMMDDMDDMMMDMDDMMDDMMMMDMDDDDDDDMDMDMMMDDDDDDDDMMMMDDDDMDDDMDDMDDMDMDDMMMDMDMMDMDDDDDDDDDMMMMMMMDMMMMDDDDMDDMMDMDDMMDMDDMMMDMMMDMDDMMMDDMMDDDDDDDDDDDMDDDDMDDDMMMMDDDMMDDMMMDDMDDMDMDMMMMMMMDDMDMDDDMMDDDMDDDDMMDDDDDMDDDDMMMMDMDDMMDDDDDDDDMDDMDDMDDDMMDDDMMMMMMMDDDMDDDMDDDMMDMDDMMDDMDDMDMDMDMMDMMMDDMMDMMMDMMMDMDMMMMMDDDDDMMDMDDDDMMDMMDMDDDMMMDDDMMMDDMDDMMDDDDDMDMDMMMDMDDMDMMDMDMMDDDMMMDDDMDDDMDMDDDDDDDDDMMMDDDDMMMMMMDDDDMMMDMDMMDMDMMDMMDDDDDMMMMMMDDDDMMMMDMDMDDDDMDMDMMMMDMMMMMDDDDDMDMMDMMDDMDMMDDDDDMDDDMDDDDDDMMDDMMMMMDMDDMDDDDDDDDDMMDDDDMDMMDDMDMDDMMMDDDMMDDMMDDMDDDDDDDDMMDDMDMDMDDDMMDMDDDMMDDMDMMDDDDDMMDDDDMDDMDMDDMMMDMMDMMDDMDMMMDMDMDMMDMMMMDMDMDDMDMDDDDDMDMMMMDMDDDDMMMDMMMMDDDDDMDDDMDDDDMDDMDMMMMMDMDDMDDMMDMMDDDMMMMDDDMDMMDDDDMMMDDMMMMMDMDDMMMMDMMMDMDDMMDMDMMMDMDDDDMDMDMMMDDDMDMMDDMMDMDMMMMDDDMDDDMMDDDDMMDDMDMDMDMMMDMDDMDDMDDMDDMMDMDDDMMDDDDMDMMDMDDDMDMMDMDDDMDMDDDMDDMMDDMDDMDDMMDDMDDDMDDMMDDDMDMMMDDDDDMMDMMDMDMMDDMMMDDDMDDMDDMMMMDMMMDDDD",
  "DMMDDDDMDMDMMMDDDMDMMDMDDMDMDDDDDDMDDMMMMDMMDMMMDDDDDDDMDDMDDMDDMDMDDDDMDDDDMMMDMDDMDDMMMDDMDMMDDMDDDDDMDDMMDDMMMMMMMMMMDMMDMMDDDDMDDDMMDDDDDMDDDDMDDDDMDDMDMMMMMMDDMDDMMDDMMDMMMDDMDDDMDMDMDMMMDDMMDDDMDMMMDDDMMDDMMMDMMMMDMDDDDMDMDDMMDMDMMMDDDMDDMMMDDMDDDDDDMDMDDDDMDDDMDDMDDDDMDDDMMDDMDDDDMMDMMMDMDDMMDDDMDDMDMDDDDDDMMMDMMDDDDDMDDMDMDDDMDDDMMMDDDDDDMMMMMDDDMDDDDDMMMMMDDDDDDMDDDMDDDDMDMDDDMDMDDMDMMDMMDDDDMMMDDDDMDDDDDDDMDMDDDMDMMDDDMDDDMDMDDMDDDDDDDDDMMMMDMMDDMDMDMDDMDMDMDMMDMMMMMMDMDMMMMMDDDMMMDDMMMMDDMDDDDMMMDDDDMDMDMDDDDMDDDDDDMDMMMMDDMDDDMMDDDMMDDDMMMDMDDDDDMMDMMDDMMMDDMDDMMMDDMMDDDDDMDDDMDMMDMDDDDDDDDDMMDMDDDMMMDMDDMDMDDMMDMDMMMDMMDDDDMDDMMDDDMDDMMMDDMDMDMDDMDDDMDDDMDMDMMMDDMDDMDDDMMDMDMMDMMDDMMMDMDMMMMDDMMMMMDDDDDDDMDMMMMMDDDMMDDMMMDDDMDDDDMDDMDMMMDMMDDDDMDMDMMMDDMDMMMDMDDDDMMDDMDDMDDMDMMDMDDMDDDDDDDMMDDDMDDDMMMDDDDDDDMDDMMDMMMDMMMMDMDDDDDDDMDDDDDDMDDDDMDMMDMMMDDMMDDDMMMMDMMDDDDMDDMMDDDDDMDMDMMDMMMDMMDDMDDDDDDDDDDDMDMMMDDDMMDDDMDDDDDMDDDDDMMMDDMMMMDDDMMMDDDDMDDDMMDMMDMDMMMDDMMDDDMMMM",
  "DDDMMDDMMMDDDMDDDDDDDDMDMDMMMDMDDMMDMMMDDDMDDMMMDMDDMDDMDMMMDDMDDDDMDDDDMMMDDDDDMMDDMDDDDDDMDDMMDDDDDMMDMDDMDDDDDMMDDMDDDDDMMDDDDDDMDMDMDMMDMDDDDMMDMDDMMDDMDMDDMDDDDMDDDDMDMDDDDDDDDDMMDMDDDDMMMDMDDMMDDDDMDDDMMDDDDDMMDDDMMMMMMMDDDMMDDMMDDMDMDMDDDDMMDMDDMMMDDDDMDMMDMMDMDDDMDDMDDMMDMMDDMMDMMMDDMDMMDMDMDMDMDMDDDDMMDDMMMDMDMDDDDMDMMDDMDMMDDDDMMMDDDDDDDDDDDMDDMMMDMMMDDDDDDDMMDDDDDMMDDMMDDMDDMDMDDMDMMDMDDMDMDDDMMDDDDMMMDDMDDMMDDMDDDDMDDMDDMMMDDDMDDMMDMMMDDMDMDMMMMDDMMDDMDDDDDMMDDDMMMDDDMDDDDMMMDMDMMDDDDMDDDDMDDDMMMMDDDMMMDMDDMMMDMDDMMDDDDMMDDMDDDDDDDMDMDDDMMMDMDDDDDDDMDMMDMMMDDDDDMMDMMDDMDMMMMMDDMDDDDDDDMMDMMDDMMDMDDDMMMDMMMDDDDMDMMMMDDDMMDDDDDDDDMDMMDDDMMDDDDDDDMMDDDDDMMMMMMDDDDDMMMDMDMMDMDDMDDDMMDDMMMMMMMDMDMDDMMMDDDDDDDMDDMMDDMDMMMDMMMMMDDMDMMMMDDMMDMDMDDDDDDMDMMMMDMMDMDDDDDDDDMDMDMDDMDMDDDDDDMMMMDMMDMDMMDMDDMDDMDDMDMMDMMMMMMMDMDDMDDMMDDMMDMDDMMDDMMDMDDDDMDMMMMDDDMDMMMDDDMMDDDDDMDMMMMMDDMDMMMMMDDDMDDDMMMDDDDDDDMDMMDDDMMDDMDDDDDMMDDMDMMDDDMDMMMDMMDDMDMMMDMMMDMDMDMDDMMDDDDMDMDDMDDDDDDMDDMMDD",
  "MDMDDMMDMMDDMMMMDMMMDMMDMDMDMDDMMDDDMDDDMMMDDDMMDDMDMMDDMDMDDDMDMDMMMMMMMMMMMMMMMMMMMMDDMDMDMMMDMDDMDMDMDDMDMMMDMDMDMDMMDMMMDDDMMMDMMMDDMMMMMMMDDMMMMMDDMMMDDMDMMMMMMDMMDDMMMDDDDDDDMDDMMDMMMMDMDMDDMDDDDDDDDDDDDMDDMDMMMDMMMMMMDDDMMDDMMMDMMDMMDMMMMDDMDMMMDDMMMMMDMMMMMDMDDDMDDMMMMMDDMDDDDMMMMDDDDMMMMMDMMMDMMDDDMMMMDMMDMMDDMDDMMDDMDDMMMDMDMDDDDDMDDMDDMMMDMMMMDDDMMMDDDDMDDMMMMDDDDMDDMMMMDMMDMMDDMMMMMDDMDDMMMDMMMDMMMDMMMMMDMMDMMMMMDMMDDMMMDMDMMMMMMMMMMMMDMDMDDMMDMDMMMMDMDMMDDMMMDMMDDMMMMDMMMMMMMMDDDMMDMMMMDMMMDMDDDDMDDMMDMMDMDMMDMDMDMMDDMMMDMMMMDMMDMMMMDDDMDDMMDDMDDDDDMMDMMDDDDDMMDMDMMDMMMDDMMDMMDMMDMMDMDMMMDMDMMMDDDDDMDMMDDMMDMMMMMMMMMMMMDDDDMDMMMMMMDMMDMMDMMDDDDDDDMDDMDMDMDDDMMDMMMMDMDDDMDDDMMMDMDMMMDDDDDMDMMMDMDDMMDMDDDMMDMDMMDMMMDMMMMDDMDDMDDDMMMMMDMDDMMMMMMMMMDDDMMDDDDMDMMDDDDDDDDMDMDDDMDMDDDMDMMMDMMDMMDMDDMMDMDMMDDMMDMDDMDMMMMMMMDMMMMMMDDMMMDMMDMMMDMMMMMMMDMMDDDMMDMDDMDDDMMMMDMDDDMMMDMDMDMDMMDMDMDMMMMMMMMMDDDDMDMDMDDMDMMMMDMDDDMMMMMMDMDDMMDMDMMMMDDMMMDMMDMMMDDDMMMDMMMDMDMDMDMMDMMMDDDDMM",
  "DDDMDDMMDDMDMMMMMMMDMMMDMDDMMDDDDDMDDMDMMMMMMMDMDDDDDDDMMDMDDDDMDDDMMDDDMDMMMDDMDMMMDMDDMDMDDMDMDDDDDDMDDDMDMMMDMDMDDMMDMMDDDMDDDDMMDDMDDDMDDDMMDDMDMDMDDDMDDDDMDDMMDDMDMDDDMMMMMDDDMDMMMMDMDDDMDMMDDDDDDMMMDDMDDDMDMMDDMDMDDDDMMMDDMDDDMDDDDDDMMDDDMMMDMMDMMMMDMDDDMDMDDMDMMMDMMDMDDDDDMMMDMDDDMMMMMMDDDDMDMMDMMDDMDMDDMDDMDMMMDDDMMMMMDMMDMDDDDDMMMMMDDMDDMDDDDMDDDMDMMDDMMMDMDDMDMDMDDDMDDDDDDDMDMDMDDDMMMMMDMMMMDDDDDMMMMDDMDMMMDDDMDMDDDDMDDMDMMMDMDDMMDMMMMMDDMDDMMMMMDDMMDDMDDMDMDMDMDMDMDMMMMMDMMMMDMDDDDMMDDDMDDMMDMDDDDDDDMMDMDDDDMMDDDMMMMMMDDDDDDMDMMMDDMMMDDDMDMDMDMMDMMMDMMMDMDDDDMDDMDDMDDMDMMDMDMMMMDMMDMDMDDMMDMMDMDDMDDDMMDMDMMMMDMMDDMMMMMDDMMMDMMDMMMDDMDDMDMDMDDMMDMMDMDMMDDDMDDMDDDMDMDDDMDDMDDDMDMDMDMDDDMDMDDMMDMMDDMDDDDMDDDDMMMMDDMDDMMDDMDMMDMMMDMDDMDDDDMMDMMMMMDMDMMMDDDMMMMMMMDDDDDDMMMDDMDMMDMMMMDMMDMMDMMMDDMMMDMDDDMDDDDDDMDDDDDMDDDMDMMDMDMMDMMMMDMDMDDDDDMMMDMDDMMMDMDDDMDDDDMMDMDMDMDMDDDDMDMDMMDMDMMMMDDMDDMDDMDMDDMMMMDDDDMMDDDMMDMDDDMDMDDMMMMMDMMDMMDDDDDMDMMMDDDMDMMDDDMMDDMMMDMMMDMDDDMDMMDDDD",
  "MDDMDDMMMMDDDMMMDMDMMDDMMDMDMDDDMDDMMDDDDDDDDDMDMDMDDDDMMMMDDDMDDDDMMDMMDMDMDDMDDMMDDDMMDMDMMDMMMMDDMDMDDDDDDDDDMDDDDMDDDMMDMDDMDDDMDMDDMMMDMMDDMDMMDDMDDDDMMDMMDMDMDDDDDMDDMDDDMDDDDDDMMMDDMDDDMDDDMDDDDMDDMDDMDDDDDMDDMMDDMMDDMDMMDDDMMMDMDDMMDMMDDDMMDMDDMMDMMDDMMMMMMDMMMMMMDMMMDDMDDDDDMMDDMDMDMDMDMMMDDMMDDMMMDMMDDMMDDDDMDDMDMMMDMMDDDDDMDMMDMDDMDDDMMDDDMMMDMMDDMMMMMMMDDMDDMDMDMMMDDDMMDDDMDDMMDDMMMMDMDDMMDMMDDMMMDDDDDDMDDMDDMDDDDDDDDMDMDDDMMDMDDDDMDMDDMDDDMDDDMDMDDDMDDMMDDMDDDDDMMMMDDMMDDDDDMDDMDDDDMMDMMMDDDDMDMMMMDMDMDMMDDMDMDDDDDMDDMDDMDDMDMDDMMMDMMMMMDDMMMDMDMDDMMMDMMDDDDDDDDMDDDDMDDDDDDDDDMDMMDDMDDDDDDMDDDDDDMMDDMMDDMDDDDDDDDDDDDMMMMDDMDDDMDDDDDMDMDDDDMDDDDDDMMMMMMDDMDMMDDMMDMDMMDMDMDDDDDDDMMMMDDMDDDDDMMMDDDDMDMMMMMDMDDDDDDDDMMDMDDDDDDMMDMDMDDDDDMMDDMMDMMDDDMDMDMDMDDDDMDDDMMDMMDMDDDDMDMDMMDMMMMDDMDDDMDMMDMMMDMDDMMDDMMDDDDMDMDMDMDDMMDMDDDMDDDDDMDMDDMDMDMDDMDDMDMMDDDDDDDDDMMMMDDDMMDMDMMDDDMDDDDMMDDDMDDDDDMDMDDMDDMDMDDDDMMMMDDMDDMDMMMMDDDDMDDDDDDDMDDDDDDMMMMMDDMMDDMDDDDDDDDMDMDDDDDDDMMDMD",
  "DDDDMDDDDDDDMDDMMDMMDDDDDMMDMDMMMDMDDMDDDMMMMMMDDMMMDMDMDMDMDMDDDMDDDDMDDMMDDMDDDDMMDMMMDMDMDDDMDDMDDDDMDMMDDMDDMDDDDDMDMDDDMDDDMMDDMDDMDDMMDDDDDMDDDDDMDDMDDDDMDMDMMDDDDDDDDDMDMDDMDDMDDMMMMDDMDDDMMDDDDDDDDMMDDDDDMDDMDDDDMDDMDDMDMDMMMDMDDDDDMDDDMMMMDMMDMDDMMDMDMDDMDDDDDMDDDMMMMDDMDMMDMDDDDDMDDMMMDMMDDDDDMDDDMDMDDDDDMMDMDMMDMDDDDDDDDDMMDDMDMDDMMDDMDMDDDDDMMMMDDMMDDDDDDDMMDMMDMDDDDMDDDDDMDDDDDMDMMDDDMDMMDMMDMMMDDDDDDDMDMDMMMMMDDMMMDMDMDDMDDDMDMDMDDMDDDMDMDDDDMMMMDDMDDDDMDDDDDDMDMMDMMMMDMMDMDMDMDDDMDDDDDMDMDDDMMDDDMDDDDDDDMMDMMMMMMDMDMDDDMMMDMMDDMDMMDDDDDDDMMDDDMMDDDMMMDDDMDDDDDDDMMDMMDMMMDDDMMDMDDMMDMDDDMDDDDMDMDDDDMDDMMDMMMDDMMMMDMDDDDDMDDDDDMMMMDDDMMDMDMMDDMMDDDDMDDDMMDDMDDDMDDDDMMMDMMDMMDDMMDDMDMDDDDDMDMDMMDDDDDDMDDMMDDDMMMMMMMMDDMDDMMDDDDDDMMMMDMMDMMMMDDDDDMMMDMDDMDMDDDMMMDDDMDDMDDDDMDDMDMDMDDMMDMMDDMDDMDMDDDMMDDMDDDMDDDMMDMDMDMMDMMMMDDMDDDMMDMDMMMDDDDDDDMDMDMDDDMDDMMDDMMMMDDMDMDMDDMDMMDMMDDDDDDMMDDMMDDMDMDMMDMDDDDMDMDDMMDDMDMMDDDMDMDMDDDDDDMDMDMDDDMDDDDMMDMDDMMDDMDMMMDMMDDMDDDDDDDDDD",
  "MDDMMDDDDMDDDDMMDMMDDMDMMDMMDDMDDDMMMMDMMMDDMMDMDDMMDMDMMDDMMMDMMDMMDMMMMMDMMMMMMDMDMMMDMMDMDMDDDMDDDDDDMMMDDDMDDMDDMMDDDDMDDMDMDMMMMMMDDMDDMDMDDMDDMDMDDDDMMDMMMMMMDMMDMMDMDDDMMMDDDDDDMMMDDDMDDMDMDMDDDDMDDMMMMMDMDMDDDMMMDDMDDDDMMMDDMDDMDDMDMMDMDDDMDMMMMDMDMMMDDMDDMMDDMMMMMDDMMMDDMDMMMMDMDMMMDDDMMMMDMMDDDDMDMMMDMMDMMMDDMDMDDMDMDMDMDDMMMMMDDMMDDDDDDDMMDMDDMMDDMDDMDMMDDDMMMMDMMDMDMDMMDMDDMDDMMDDMMMMDMMDDMDMDMDMMDDMDDDDMDDDDDDDDDDDMMDDMDMMDMDMMMDDDDDDMDDMDDMDDDMMMDMDMDMDMDMMDMMMDMMDDDMMDMDDDDDDMDMDDMDDDDDDDDMMDDMMDDMMMMMDMMDDDDDDMMDDDDDDMDMMMDDDDDDDMDDMMMDDDDDMDDDMMDDMDMMMDDDMDMMMMMMMDMMDDDDDMMDDMDMDMMMMMMDDDMDDMMMMMDDMDMMDDDMDDMMMMMDDMDDDDDMMDMMMMMDDMDMDMDMDMMMDDMMDDMDDDMDDMDDMDDDDMDMMMMDDMDMDDMMMDDDDMDMMMMMMMDMDMMDDDMDDDMDDMDMMDDMDMDDMDMDMDDDMMDMDDMMMMMMMDDMMDDMDMDMDDMMDDMDMDDDMMMMMDDMMMMMMDMMMDDMDDDDMDDMDMMDMMMDMMMDMDMMDMDMDMDMMDDDMDDDMDDDDMDMDDMMMMDDDMMDMDDMDMMMMDMDMMMDMDMMMMDDDDDMDDDDDMDMMMDMMMMDMDDDDDMMMDMDDMDMDMMDMMMDMMDMMDDDMMDDDMDDMMMDDDDMMDDMDDMMMMDDMMDDDMMMDMDDMMMMDDMMMDMMDDDMDD",
  "DMMMMMDDDDMDMDMDDDMMDMMMMDDMDMMMMDMDDDMMDMDMDMDDMMMMMDMDDMMMMDMDMDDMMMMDMMMMMMMMMMDMMDDDMMDDMDMDMMDDDDMMMMDMMDDMMDMDMDMDDMDMMDDMMMDMMDMDDDDMDMMMMDDDMMMMMMMDMMMDMDDMDDDDMMDDMDDDMDDDMDDMMDDMDMMMDDMMMMMDDMDMDMMDDMDDDDMMDDMMMMDDDMMDDMMMMMMMMMDDMDMDDMMMDMDDDMDMMMDMDDDDMMDDDMMMDMMDMMDDDDMMDDMDDDMMDMDDMMMMMMMMDDDDMMMDMDMDDDMMDDMDMDMDDMMMMMMMDDDMMDDMDMDDMDDMMMDDMMMDMDMMDDDDMDMDMMMDMDMMMMMMDDDDMMDDMDMDDMMMMDDMDDMDDDMDDMMDDMMMDDMMDMMDMMDMMDMDMMDDMMDDMMDMDDDDDDDDMDDMDMDMMDMMDDMMDMDDMMMMMMMMDMMMMDDDMDDMDDMDDDDDDDMDMMDMDMDDMMDMMDMMDDDDDMMMMDMDMMDMMDMDDDMMDMMDMDDMMDDMDMDDDMDDDMMDMDMDMMMDDMMDMDMDMMMDDMDMDDMDMMDDDDMMMDDDDDMDDDDMDMMMDMDMDDMMMMDMDDDDDDMMMMDDDDDMMDMDDMDDDDDDDMMDMDMMDMDMDDMDMDDDMDDMMMDDDDMMDDMDDMMDMMMMDMDMDDMDMMDMDMMMDDDMDMDMMMMMDDDDMMMMDMDMDMMMMDDMMDDDDMMMMDMDDMDMMDDMDDDDMMMDDDDDMDMMMMMDMMMDMDMMDMMMMMMMMMMMMMMMMDDDDDMDMDMMMMDMDMMMDDMDMDDMMMDMDMDDMDDDDMMDMDMMMMDMDDMMMMMMMDDDDDDMMMMDDMMMDDMMMDDMDMMMMMDDDDMDMDMMDMMMMMMDDDDDMDMDMMMDMMDDMMDDMMMMMMMMMMDDMMMMMDDMDMDMDDDMDDDMDMMDDDDMDDDDMMDDDDDD",
  "DDMDDDMMDDMDMDDMMMDMDDDMDMMDMMDMMMDMMMDMDDDDDMDMMMMDMDDDDMDMDDMMMDDMMMDDDDDDMDMMMDDDMMDDDMMMMDDMDMMMMMMMDMMDMDDDMDMDMMMMMMDDMDMDMDMMMDMMMMDDMMDMMMMMDDDDDDMMMMDDDDMDDDDDMDDMDMMMMDMDDMMDDMMDMMMDMMDMMMMDMMMDMMDMMMDMMDMDDMDMDMDMMMDDMMMMMDMMDDDMMDDMMMMMDDDMMMDMMMDMMDMMDMMMDMMMDDMMDMDDMDDDDMMMDDDMMDMDDMDMMDDMMMDMMMMDMDDDMMMDDDMMMDMMDMMMDDDDMMMDDMMMDDDDMMMMMMMMMDDMDMDDMMDDDMMMMDMDDDMDDDMMDDMDDDDDMMDDMDDMMMDDDDMDDDMMDMDMMDMDMDMMDDMMMDDDMDMDDDDDDMMDMDMDDDMDDMDMMDMDDMDMMMDDMDDMMDMMMMMMMMDDMMDMDMMMMDMDMMDMDMDDMMMMDDMMDMDMDDDDMDMDDMMMMMDMMDDMMMDMMMDMDDDMMDDDDMMDMDMMDDDDMMDMDDDMMMMMMDDMMDMMDMDMMDMMMMDMDDDMMMMMDDMMDDDDMMDDDMDMDMMMMMMDDMDMDMDDMDDDMMDMDDDDMDMMDDMDDDDDMMDDMMDMDMMDMDMMMDMMMMMMMDDDDDDDMDMDMMMMMDMDMDDDMMMDDMMMDMDMDMDDDMDMDMDDDDMMDMMDDDMMMMDDMDMMDMMMDDMDMDDMDMMDMMDMMDMMDDDDMMDMDMMMDDMMMDMDDMMDMMMDMMDDMDMMDMDDDMMDMMMMMDMMDDMDDDMMMDDDDMMMMMDMMMMMDDMMDMMMDDMDMMDMMMMMDDMMDMDMDDDMDMDDMMDDMMDDMDMMDMDMDMMMMMDMMDDMMMMMDMMMDMDDDMMMDDMDDDMDDMMMMMMDMMMDDMDDMMDDMDDDDMDDMMDMMDMMMMMDDMDDMMMDMDDDMDDDDMDD",
  "MMMMMDDMMDMDMMMMMMMDDMDMDMDDDMMDMDMMMDMMMMMMDDMDMMDMMMMDMMMDDDMMMMMDDMMDMDDMMDMDDMMDMDMMMDMMMMMMMDDMMMDDDMDDMDMMDMMMMMDMMDMMMMMMDDMDMDDMDMDMMDMDDDMMMMMDDMMMMDMMDMDDDDMMMDMMMMMMDDMMMMDMDMMDDDDMMMMMMDMMMMMMMDDMDMDMMDMMMMDDDMDDMMDMMMDDMMDMMMMMMDMMMDDMMMMMDDMMMMMMMMMDMMMMDDMDMMMMMMMDDDMDDDDMDMMDMMMDMDDMMDMMDDMMDMDDDDDMMDDDMDMDDMMMDDDMDDMMMMDMMDDMMMMDMMMMDMDDDMMDDDDMMMDDDMMMMDMMDMDMDMDDMMDMMDMMDDDMDDMDMMMDMMMMMDMMMMDDDMDMDDMDDMDDMMDDDDMDDMMMDDMMDMDDDMMMMMDDDMDMMMMMMDDMMMDDMDMMMMMMMDMMMDMMDMDMMMDMMDDMMDDMMDDDDMMMMMMMDMDMMMMMDMMDMMDDDMMMMMMDDDDMMMMMMMMMMMMMMMDDMMDMDMDDMMMMDMDMMDMDMDDMDDDMMDDDMMMDMMDMMMDDMMDDMDDMMDDDMMDDMDDMDMMDDDMDMMDMDMMDMDDDMMMMMDDDMMMDMDMDDDDDDMMMMMDDMMDMDMMMMDDDDMDDDMMDMMMDMMDMMDDMDMMDDDDDMMMDMDMDMDDDMDMMDMDMMDDMDMDDDMMMMDDMDDDDMMDMMMMDDMMDDDMDDDMMDMMMDMDDMDDDMDDMMDMMDDDMDMMDMDMDMMMMMMMMMMDMDDMMMMDMMMDDMDMDMDMDDMMMDDMMDMDMMDDDDDMDDMMMMMDMDMDMDDMDDDMMMMDDMDDDDMMDMMMDMDDDDDMMMMMMDMDDMMMDDDDDMMMMMMMMDDMDMMMDMMDMMDMMMMMDMDDDMMDDMDMMMMDDDDDMMDMDDMMDMDMDMDMMMMMMDMDMMDDDMMDMDDMM",
  "MMDMDDDMDMDDMDDMDDDMDDMMMMDDDMDDDDMMDMMMMMDDMMDDDMMDMDDMMMDDMDMMMMMMMMMDMMDDDMMDMDMMDDDMMMDDDDDDMMDMDDDDMMMDDMDDDMMMMDDMDMMMDDDDDDDDDDDMMDMMDMMDDDMDDMMDMDDDMDMMDDMMMMDMDMDDDDMMMMMDDDDDDMDMMMMMMDMMDMDMMDMDMMDDDDMMDDMDMDMMMMMDDMMMMDDDDDMDMDMMDDDMMDDMMDMMDMMDDDMDDMMDDDMMDDMMMDDMMDDDMDDMMDDMMMMMMMDMMMDMDDDMMDDMMDDDMMMMMMMDMDDDDMDMDMMDDDMDMDMMMMMDMDDDDMDDDDMMMMDMDDMDMDMMDMMMDMMDDMDMMDMMDDMMDDMMDMMMDDDDMMMMDDMMDMMMMMDMMMDMDDMMMDDMDDDMDMMMMMMDMMMDDMMDDMMDMDDMDMDDDDMDMDMDDMDMDMDDDDDMDDMDMDDMMMDDDMDDMDMDDDMDMDMMMDDMMMMDDDDDDMDDMDMDDDDDMDDDMMMMMMMMMDDMDMMMDMMDMMDDDDMDMMMDDDMDDDDMMDDMDMMDDDDMMDDMMMMDDMDDDDDDDMDMDMDMMMDMMMMMDMDDDDDMDMDMDDDMDDDMMMMMMDMDDDDDDMMMDDMMDMMMDMMMMMDDDDDMDDDDMMDDMDDDMMMDMMMMDDDDDDMDMDDDDMDMMDMDDDDDMMMMDDDMMDMDDMMDMMDDDMDMDDMMMDMDMMMMMDMDDMMDMMDMDDDMDDMDDMMDMMDDDDMMMDDMMMMDDMDMDDMMMDMDMMDDMMMMDDDDMMDMMDMDMMDMMMMMDMMDDDDMMDMMDMDMMDDMMMDMMMDMMDDDDMDDMDDMDMDMMDMMMDMMMMMMDMDMDMMMDMMDMDMDDDMDMMMMDDDMMDDDDMMMDDMMMMDDMMDDMDDMMMDDDMMMDMDMMMDMDDDDMMDMDMMDDMDMDMDMDMDMMDDMMDMDDMDDDDDD",
  "MDDDMDMMMDDDDDDMMDMDMDMDMMDMMDDDDMDMDDDMMMDMMDDMMDMMDMDDDMDDMDMMMMDDDMMDMDMMDMMMDMMMMDDDMDMMDMDDMDDMDDMMMDDMMMDDDDDDMDDMDDDMDMMDMDDDDMDMMMDDDDDMMDDMMMMDDDDMMMMMMDMDMMDMMMMDDDDDMMMDMMMMDDMDMDDMDDDMMMDDMMDDDDDMDMDMMDMDDDDMMMMDMMMDMMMMDMDDDDMDMDDMMMDMDMDDDMDMDDDDMMMDMDDMDMDDMDDDDMDDDMDMDMDMMMMMDMDDDDDDDMMMDDDMMDDMMDDMDDMDDMDMMDDDDDMDDDDDMDMDDDDDMDMDMDDMDDMMDMMMDDDDMDDDDDMMDMDMMDMDMDMDMDDMMMMDDDMDDDDDDDMMDDMMDDMMDDMDDMDMDDMDDDDMDDDMMDDDDDMDMDDDDDMMDMDDDMMMDDMMMDDDMMDMMDMMMDMMMMMDDDDMMDMDDMMDMMMMDDMMDDMDDDMMMMMMDMDDDDDMDMMMMMDDMDMMMDDMMDDMDMMDMDMMDDMMDDMDDDDMMDDDDDMMDDDMDMMMMMMMMDMMDMDDDDMDDMMMDMMDDMMMDDMDMDMDDDMMMMMDMDDMMDDDMDDDDMDMDDMMDMDMMDDMDDDMDDDDMDDDDDDDMDMMDDMMDDDDDDDMDMDDDMMDDMDDMDMDMDMMMDDDMMDDDMMDMMMDDDDMDDMDDDMMMDDDDDDMDMDDDDMMMDDDMDMDDDDMDMMDDDMDDDMDDDMDMMDMMDMDMDDDDMDDMDMDDMDMDDDDDDMDMDDMDDDMDMMDMDDMMDDDDMDDMDMMMMDMMDDMDDDMDDDDDMMDMMDMDMDDDMDMDMDDDDDDMDMMDDDMDDMDDDDMMMDMDMMDDDMMDDMDMMDDDDMDDDDDMMMDMDMDMDDDDDMDMDMMMMDMDMMDDDMMDMMDDMDDDDDMDDMMDMDDDMDDDDDMMDMMMMMDDMMMMDDDDDDDDDDD",
  "DMDDDDMDDMDMMMDDMMMMDDDMDMMDMMDMDMMDMDDDMDDMDDMMMDDMDMDMMDDMMMMMMDDMMMMDMMDMMDMMDDDDDMMDDMMMDMMDMMDMMMDMDMDDMDDMMDMMMMDMDMMDMDDMMMMMDDDDMDMMMDMDDDDMMDMDDDDDDDMDDMMDMDDDMMMMDMDMDMMDMMDMDMMDDDMDMMMDDMDMDDDDMDMDMMDDDDMMMDDMDMDMDMDMMDDDDMDMMMDMMMMMMDDMDDMMDMMDDMDMMMDDDMDMMDMMMDMMMDMDDMMMMMMMDMMMMMDMMMMMMDDMMMMMMDMDMMDMDMDDMDDMDMMDDMMDDMMMMMMDMMMDMMMDDDDMMMMMMMMDDMMMDMMMDMDMDDDMMDMDMDMDMMDDMMMMMDDDDDMDDDDMMMMDDMMMDDDDMMDDDMDMMDDMMMDDMDMMMMDMDDDMDDDDMMDDDDMMDMDMDDMMMMDMDMMMDMDDMMMDMMDDDMDMMMDDDMMMDDMMMDMMMMMDDMMDMMMMMMMMMDDMMMDMMMDMDMMMDMMDDDMMDDDMDMMMMMDDDMMDMDDMMDMDMDDDDDMMDDMMMDMMMDMMMMMMMMDMMMMDDMMDDDDMDDMDMDDMDMDMDMDMMMDDMMDMMDMMDDMMDMMDMDMMDMDMMDMDDMMDMMDMDMDMDMMMDDDMMDMMMMMMDDMMDMDMMDMDMDDMDMDDDMDMDMMDDMMDMDMMMMDDMMDDMDMMMMDMMDMDMDDMMMDDMMMMDDMMMMMMMDMMMMDMMDDMMMDDMDMDMMMMMDDDMDDMDMDMDMMMMMMMDDMMMMMMMMMMMDDMMMDMDMMDMDMMMMMDMMMDDMMDMMMMDDDMDDDDDMDMDMDDMDMMDDMDMMDMDDDDDDMDMMDMDMDDMDDMDDDMMMDMMMMMMDDMDDDDMMMMMDMMDDMDMDDMDMDDMDDDMMMDDDMDMMMMMMDMDMMMDMMDMDMDDDDDMMDMMDMDMDDDDDMMDDMMMMMDDDDM",
  "DMDDMDDMDMDMMDMDMDMDMDDDDDDDDDDMMDDDMDDMMDMDDDDDDMMMDMMMMDMMDDMMMDDMDMDMDDDMMDMMMDMDDMDMDMDDDDDMMDDDDMMMDMDMDDMMDMDMMMMDDMDMDDMDDDDDDDMMMMDMMDMDDMDDDMDMDDDDDMDMMDDDMDDDMDDMDDDMMDMDDMMDMDDMDMMMDDMMDDDDMDMMMMDMMDDDMMMDMMDDMMDDDDDDDMDDDDDDMDDDMDDDDDMDMMMMDDMMDDDMMDDMDMMMMDMDMDMMMDMDMMDDMDDDMMDMDDMMDMDDDMMDMMDDMMMMDDMDMDMMDDDDMDMDDDMMDMDMDDDMMMMDDDDDDMDDMMDMMDMDDDDMDDDMDDDDDMMMDDDDDDDMMDMDDDDDMDDMDDMDDDDDMMDMDDDMDDMDMDDDDDDMMDMDMMDDDMDDMMDMDMDDDDDDMDDDMMMMDDDDDDMMMMDDDMDMDDMMDDMMMDMDDMDDDMDDMMDDMMMDMDMMMDDDMMDDDMDMDDDDMMMDDDMDDMDDMDDMDMMDMMDDDMMMDMDDDDDDDDDDDDDDDMDMDDDDDDMMMDMDMDDDMMDMDDDDDDDDDMDMDMDDDMMDDDDDDMDDDDMDDDMMDMDMDDMMDMDMMMDDMMDDDDDDDDDDMDDDMDMDDMDDMMDDMDDMDMMMMMDDMMMDMDDDDMMMMMMMDDDDMDDDDMDDMDDDDDDDMMMMDMDDMDDDDDMMDMDDDDMDMDDDMMMDMMDMDMDDMDMDDMMDMDMDMDMMDDDMDDDDMMMDMDDDMDDDDDDMDMMMDDDDMDMMDDDMDDDMDMMMMMDDMMMMDMMMMDDMDDMMMDDMDDDDDMDDMDMDDDMDDDMDDMDDDMDDMDDDDDMMMMDDDDMMDMDMMDDDDMMMDMDMDDMDMDMDMDMMMMDDDDMDMDDDMMMMMMMMDDDDDMDDDDDDDMMDMMMMMDDDMMMDDMMMMDMDDDMMDDDDMDDDDMDDMMDDDMDDDMDM",
  "MMDDMMMMMMMMMMMDMMMMMMDMDMDDDMDDMMMDMDDMMMMMMMDMDMDDDDMMDMMMMMDMMMMDMMMMDMMMMMDMMMMMDMDDDDDMMDMMMMMDDMMDMDMMMMMDDMDMDDMDMMMDMMDMMDDMDDDMMDMDMMDMMMMMMMMMDMMMDMDDDDMMDMDMMMMMMMMMMDMMMMDDMDMDDMMDMMMMDMMDMDDMDMMDMMDMMDMDMDDMMMMDMMDMDMMDDDDMDMMMMMMMMMMMDMMMMDMDDDMMDDMMMDMDDDDDMDMMMMDDMDMMDDMDDDMDMMDDMMMDMMMDMMMDDDMMDMMDDDDMMDDMDMMMMDMMMMMMDDDMMMMDDMMDMMMMDMMMDDMDDMMMDMMDMDMMMDMDMDMDDMDDDMMMDDDMDMMMMMDDDMDMDMDMDMMMMMDDDMMMDMMDDDDDDMDDDDMMMMMMDMDMMMDMMMDMMDDDMMDDMMMMDMMDDMMMDMMDDMMMMDDDMDMDDMMMDDMMDMMDMMDDMMDDDDMDMMMMDMMMMDMMDDDMMMDMMDDDDDDMMMMDDDDDMMMDMMMDMMMMMDMMDMMMDMDDDMDMDDMMDDMDMDDDMMDMMMMMDDMDMDDMMMMDMDDMMDDMMDMDMDMMDDMMDDDMMDDMMDDMMMMMDMMMMMDMMDDMDMDMMDMDDMMMMMDDMDMDMMDMMDMDMMMMDDMMMMMDDMMMMMMMDMDMDMDDDMMDDDDMMMMDMMMDMMDMMDDDMMMMDDMMMDMMDDMDDMMDDMMDDMMMMDMMDDMDDDDMDMMDDMMMMMMDDMDDMMDDDMDDMDMMDMMMMMMMDDMDDDMDDMMMMMMDMDDDDMMDDMMMMMDMDMDMMMDDMDMMMDDDDMMMDDDMMMDMDMDDMMMDDDMMMMDDMMDMMDMDMMDMDDMDMMMMMDDDDMDMDDMMMDDDMMMDMMDMDDDMDMDMDMMMMDDDDMDMMDMMMMDDDMMDMDDDMMDMMMMMDMDDDMDMDDMDDMDDDMDDMDDD"};
  return ans[TID];
}


static int DX[] = { 1, 0, -1, 0 };
static int DY[] = { 0, 1, 0, -1 };

struct IsDfs {
  int n;
  const vector<string> maze;
  vector<int> parent, depth;
  vector<vector<int>> children;
  vector<pair<int, int>> rawlt;
  vector<vector<int>> pp;
  bool isDfs;

  int cell(int x, int y) {
    return x * n + y;
  }

  void dfs(int x0, int y0, int d) {
    int z0 = cell(x0, y0);
    ++d;
    FOR(k, 4) {
      int x = x0 + DX[k];
      int y = y0 + DY[k];
      if (x < 0 || x >= n || y < 0 || y >= n) {
        continue;
      }
      int z = cell(x, y);
      if (maze[x0 * 2 + 1 + DX[k]][y0 * 2 + 1 + DY[k]] == '.') {
        if (parent[z] == -1) {
          parent[z] = z0;
          children[z0].push_back(z);
          depth[z] = d;
          dfs(x, y, d);
        }
      }
      else {
        rawlt.emplace_back(cell(x0, y0), cell(x, y));
      }
    }
  }

  int up(int a, int d) {
    for (int i = 0; d > 0; ++i, d >>= 1) {
      if (d & 1) {
        a = pp[i][a];
      }
    }
    return a;
  }

  bool isAncestor(int a, int b) {
    return depth[a] <= depth[b] && a == up(b, depth[b] - depth[a]);
  }

  IsDfs(int n_, const vector<string>& maze_) : n(n_), maze(maze_), parent(n * n, -1), depth(n * n), children(n * n) {
    parent[0] = 0;
    depth[0] = 0;
    dfs(0, 0, 0);
    pp.push_back(parent);
    while (*max_element(pp.back().begin(), pp.back().end()) > 0) {
      vector<int> ppp(n * n);
      FOR(i, n * n) {
        ppp[i] = pp.back()[pp.back()[i]];
      }
      pp.push_back(std::move(ppp));
    }
    isDfs = true;
    for (const auto& i : rawlt) {
      isDfs = isDfs && (isAncestor(i.first, i.second) || isAncestor(i.second, i.first));
    }
  }

  static string process(const string& file) {
    ifstream ifs(file);
    int re;
    ifs >> re;
    string ret;
    ret.reserve(re);
    FOR(ri, re) {
      int n;
      ifs >> n;
      vector<string> maze(2 * n + 1);
      FOR(i, 2 * n + 1) {
        ifs >> maze[i];
      }
      ret.push_back(IsDfs(n, maze).isDfs ? 'D' : 'M');
    }
    return ret;
  }

  static void processAll(const string& dir, int n) {
    cout << "{";
    FOR(i, n) {
      string file = dir + "/" + std::to_string(i) + ".in";
      cout << "  \"" << process(file) << "\"," << endl;
    }
    cout << "}";
  }
};

// BEGIN CUT HERE
// <main>
#define ARRSIZE(x) (sizeof(x)/sizeof(x[0]))

template<typename T>
ostream& operator<<(ostream& os, vector<T>& v) {
  os << "{";
  FOR(i, v.size()) {
    os << "\"" << v[i] << "\",";
  }
  os << "}";

  return os;
}

vector<bool> __eq__;

template<typename S, typename T>
void eq(int id, S v1, T v2) {
  ostringstream s1, s2;

  s1 << v1;
  s2 << v2;

  errf("Case #%d: ", id);
  if (s1.str() == s2.str()) {
    __eq__.push_back(true);
    errf("\033[1;32mPassed\033[0m\n");
  } else {
    __eq__.push_back(false);
    errf("\033[1;31mFailed\033[0m\n");
    errf("\tReceived \"%s\"\n", s1.str().c_str());
    errf("\tExpected \"%s\"\n", s2.str().c_str());
  }
}

int main(int argc, char *argv[]) {
  (void)argc;
  (void)argv;

  cout << IsDfs::process("TwoMazeAlgorithms/0.in") << endl;
  IsDfs::processAll("TwoMazeAlgorithms", 21);

      {
        TwoMazeAlgorithms theObject;
        eq(0, theObject.classify(0),"MDDMDMDDDMMMMMDMMDDMDDMMDDMDDMMMMMDDMMDDMMMDDDMMDMDMDDMDDDMDDMDDDDDMDMDDDDMMMMMDDDMDDDDMDDMDDMDDMMMM");
    }

  int __pass__ = count(ALL(__eq__), true);
  int __fail__ = count(ALL(__eq__), false);
  if (__fail__ == 0) {
    errf("\033[1;32mAll %d Passed\033[0m\n", __pass__);
  } else if (__pass__ == 0) {
    errf("\033[1;31mAll %d Failed\033[0m\n", __fail__);
  } else {
    errf("\033[1;31m%d Passed; %d Failed\033[0m\n", __pass__, __fail__);
    if (__eq__[0]) {
      errf("\033[1;31mDid you reset global variables?\033[0m\n");
    }
  }
  errf("\033[1;33mPress any key to continue...\033[0m\n");
  (void)getchar();

  return 0;
}

/*
 * __builtin_popcount __builtin_ctz
 * make_pair first second
 * iterator const_iterator
 * priority_queue
 * push_back
 */
/*
 * vim: ft=cpp.doxygen
 */
// </main>
// END CUT HERE
